What is the user story?
As a user I want to be able to communicate with the docker containers running from the hosted site to the locall docker containers running on my machine at home.
Why do we want to solve this user story ?
- Currently we are able view the counter bot updates using firebase real time database but we need a way for clients on the go communicate with the bots on the go using pub/sub - for now we will have the bots simply update the real time database of what messages they got from the client 


Frontend Questions (client folder)
whay page do we need to modify and what needs to be done?
- Currently we are only using App.tsx and in there we have a dashboard component from client\src\components
- We need to implement react routing here client\src\routes which will allow us to create multiple different pages
- In our App.tsx I would like us to have the current dashboard where we can see the bots and I would like to add another page with the routes - /logs
- Our new /logs page will have the logs of the bots running in our docker container log events they send / receive from the pub/sub, this way it will be easier to debug issues in the future
- In our current dashboard page, I would like to update it where the user can forward a message to the bots, there are two options, we can either send a message to all of the bots or the user can select which bot to send a message to and only that bot will read the message based on the provided id
This will be a very simple json we will send {id: string, message: string, target: ("ALL" | <containerId>)}

- Create two pages, the dashboard page and the logs page

What components do we need to modify and what needs to be done?
- We will move the Dashboard to be it's own page that we will create here client\src\pages and we will use the page in our routes here client\src\routes which will have an index file that which will will use to create multiple pages
- Once we create our basic log page we will create a component to view the logs which will hold the basic information of timestamp, containerId, message which will help the user debug issues, since there will not be a direct endpoint communication we will have to relay on the pubsub to fully communicate with all of the containers that are connected to the pubsub
What hook do we need to modify and what needs to be done?
- client\src\hooks\useFirebaseServices.ts - We will update all of the calls we are making to the firebase directly and move the to client\src\service\firebase - From there we will create a new firebase.service.controller.ts file that will call the new firebase-endpoint.service.ts functions, this will we can easily test endpoints and mock them in the future if needed

What service do we need to modify, why and what needs to be done?
- We will create a new firebase-endpoint.service.ts in client\src\service\firebase that will have all of the functions needed to communicate with our firebase backend and pubsub, we will also move all of the firebase calls that we are currently making here client\src\hooks\useFirebaseServices.ts to this new service file
- Whenever a new message comes in we will need to log it in our database for future deubuging, perhaps we create listeners functions that listens to pubsubs and automatically logs all of the events in the database so that we don't have to make additional calls to simply log the events
what controllers do we need to modify, why and what needs to be done ?
We will create a new file called firebase.service.controller.ts in our client\src\service\controllers which will call our new firebase-endpoint.service.ts functions
--------
Backend Questions
What service do we need to modify, what and what needs to be done?

firebase_client.py - Will need to be able to subscribe to the new pubsub topic that we will create and be able to forward it to the counter bot
- We also need to update it where if a message is receieved we will log it in our /log database for future debugging

counter_bot.py
- We will need to modify the counter bot to be able to subscribe to the new pub/sub and if a message comes and it is either ALL or matches the counter bot Id, we will respond by updating the real time database of the new message we receieved from the pubsub


This is the implementation plan I am thinking, ask questions to clarify to make sure we are on the same page before moving forward
++++++++++
Questions:
Message Structure: Is the JSON structure I proposed {id: string, message: string, target: ("ALL" | <containerId>)} sufficient for your needs, or do you want to include additional fields in the messages?
-  No this should be fine for this simple test
Log Format: For the logs page, what information is most important to display? Just the timestamp, container ID, and message, or would you like additional metadata?
- This should be fine for this simple test
UI for Sending Messages: How would you prefer the message sending UI to look in the dashboard?
A simple form at the bottom of each bot card?
- Yes, make it look modern and mobile friendly
A central message form that allows selecting recipients?
- Yes, make it look modern and mobile friendly
Something else?
Authentication: Do we need to implement any authentication for message sending, or can any user with access to the dashboard send messages?
- Any user with access to the dashboard should be able to send messages
Real-time Updates: Should the logs page update in real-time as new logs are created?
- It should be updated in real time, and I would like to create a firebase function listener that will listen to the pub/sub and automatically log the events in the database
Message History: Should we store and display a history of sent messages, or only the current status?
- So the real time database will have the up dated status of the bots/docker containers program but the database will store the logs of all the messages that were sent in the pub/sub
Priority Features: If we need to prioritize, which aspects of this implementation are most important to you?
- The Pub/Sub and the Real Time Database
External Libraries: Are there any specific React libraries you'd prefer we use or avoid for implementing the routing and UI components?
- Look at our package.json and see what is needed and we want to use react router

From this, let's create a checklist of all of the things we need to do to complete this implementation, Each checklist must have the file we need to create/update, provide the reason why we need to create/update it, and provide the instructions on how to create/update it, each function/method and code we implement we need to add a comment explaining what the function does, how it is used